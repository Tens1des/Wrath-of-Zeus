//
//  ContentView.swift
//  Wrath of Zeus
//
//  Created by –†–æ–º–∞ –ö–æ—Ç–æ–≤ on 04.09.2025.
//

import SwiftUI
import SpriteKit

// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
extension Notification.Name {
    static let restartGame = Notification.Name("restartGame")
}

struct SKViewRepresentable: UIViewRepresentable {
    var scene: SKScene
    
    func makeUIView(context: Context) -> SKView {
        let view = SKView()
        view.isMultipleTouchEnabled = true
        // –í–∞–∂–Ω–æ: –Ω–µ –ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞—Ç—å —Å—Ü–µ–Ω—É –∑–¥–µ—Å—å, –µ—Å–ª–∏ –º—ã —É–ø—Ä–∞–≤–ª—è–µ–º –µ—é –∏–∑–≤–Ω–µ
        return view
    }
    
    func updateUIView(_ uiView: SKView, context: Context) {
        // –ü—Ä–µ–∑–µ–Ω—Ç—É–µ–º —Å—Ü–µ–Ω—É –≤ updateUIView, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –æ–Ω–∞ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞
        if uiView.scene != scene {
            uiView.presentScene(scene)
        }
    }
}

struct ContentView: View {
    @StateObject private var gameScene = GameScene(size: .zero)
    @Environment(\.dismiss) private var dismiss
    @Environment(\.presentationMode) var presentationMode
    
    var body: some View {
        GeometryReader { geometry in
            ZStack {
                GameSceneView(scene: gameScene)
                GameUIView(gameScene: gameScene)
                
                // –≠–∫—Ä–∞–Ω –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
                if gameScene.isGameOver {
                    GameOverView(
                        finalScore: gameScene.score,
                        sessionCoins: gameScene.sessionCoins,
                        isNewRecord: gameScene.isNewRecord,
                        onHome: {
                            print("üî¥ –ö–†–ê–°–ù–ê–Ø –ö–ù–û–ü–ö–ê HOME –Ω–∞–∂–∞—Ç–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                            presentationMode.wrappedValue.dismiss()
                        },
                        onAgain: {
                            print("üîµ –°–ò–ù–Ø–Ø –ö–ù–û–ü–ö–ê AGAIN –Ω–∞–∂–∞—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ")
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã
                            NotificationCenter.default.post(name: .restartGame, object: nil)
                            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä—É
                            presentationMode.wrappedValue.dismiss()
                        }
                    )
                }
            }
            .onAppear {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ü–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                if gameScene.size == .zero {
                    gameScene.updateSize(newSize: geometry.size)
                }
            }
            .navigationBarHidden(true)
        }
    }
}

// –û—Ç–¥–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–≤–æ–π —Å—Ü–µ–Ω—ã
struct GameSceneView: View {
    @ObservedObject var scene: GameScene
    
    var body: some View {
        SKViewRepresentable(scene: scene)
            .ignoresSafeArea()
    }
}

#Preview {
    ContentView()
}
